program sncRSFSxSetup

double CenterFreqSP;
assign CenterFreqSP to "{P}{R}FreqCenter-SP";

double CenterFreqRB;
assign CenterFreqRB to "{P}{R}FreqCenter-RB";
monitor CenterFreqRB;
evflag CenterFreqFlag;
sync CenterFreqRB CenterFreqFlag;

double CenterFreqProc = 1;
assign CenterFreqProc to "{P}{R}FreqCenter-RB.PROC";

double SpanSP;
assign SpanSP to "{P}{R}FreqSpan-SP";

double SpanRB;
assign SpanRB to "{P}{R}FreqSpan-RB";
monitor SpanRB;
evflag SpanFlag;
sync SpanRB SpanFlag;

double SpanProc = 1;
assign SpanProc to "{P}{R}FreqSpan-RB.PROC";

double FreqStartSP;
assign FreqStartSP to "{P}{R}FreqStart-SP";

double FreqStartRB;
assign FreqStartRB to "{P}{R}FreqStart-RB";
monitor FreqStartRB;
evflag FreqStartFlag;
sync FreqStartRB FreqStartFlag;

double FreqStartProc = 1;
assign FreqStartProc to "{P}{R}FreqStart-RB.PROC";

double FreqStopSP;
assign FreqStopSP to "{P}{R}FreqStop-SP";

double FreqStopRB;
assign FreqStopRB to "{P}{R}FreqStop-RB";
monitor FreqStopRB;
evflag FreqStopFlag;
sync FreqStopRB FreqStopFlag;

double FreqStopProc = 1;
assign FreqStopProc to "{P}{R}FreqStop-RB.PROC";

double SweTimeProc = 1;
assign SweTimeProc to "{P}{R}SweTime-RB.PROC";

double FreqArrayProc = 1;
assign FreqArrayProc to "{P}{R}FreqArray-Mon.PROC";

int MarkAOff;
assign MarkAOff to "{P}{R}MarkAOff-Cmd";
monitor MarkAOff;
evflag MarkAOffFlag;
sync MarkAOff MarkAOffFlag;

int EnblM1;
assign EnblM1 to "{P}{R}EnblMark1-Sel";

int EnblM2;
assign EnblM2 to "{P}{R}EnblMark2-Sel";

int EnblM3;
assign EnblM3 to "{P}{R}EnblMark3-Sel";

int EnblM4;
assign EnblM4 to "{P}{R}EnblMark4-Sel";

ss ss1 {
    state opr {

	when (efTest(CenterFreqFlag)) {
	    
	    pvPut(FreqStartProc, SYNC);
	    efClear(FreqStartFlag);

	    pvPut(SpanProc, SYNC);
	    efClear(SpanFlag);

	    pvPut(FreqStopProc, SYNC);
	    efClear(FreqStopFlag);

	    FreqStartSP = FreqStartRB;
	    pvPut(FreqStartSP, SYNC);
	    efClear(FreqStartFlag);

	    SpanSP = SpanRB;
	    pvPut(SpanSP, SYNC);
	    efClear(SpanFlag);

	    FreqStopSP = FreqStopRB;
	    pvPut(FreqStopSP, SYNC);
	    efClear(FreqStopFlag);

	    pvPut(FreqArrayProc, SYNC);
	    pvPut(SweTimeProc, SYNC);

	    efClear(CenterFreqFlag);

	} state opr

	when (efTest(SpanFlag)) {

	    pvPut(CenterFreqProc, SYNC);
	    efClear(CenterFreqFlag);

	    pvPut(FreqStartProc, SYNC);
	    efClear(FreqStartFlag);

	    pvPut(FreqStopProc, SYNC);
 	    efClear(FreqStopFlag);

	    CenterFreqSP = CenterFreqRB;
	    pvPut(CenterFreqSP, SYNC);
	    efClear(CenterFreqFlag);

	    FreqStartSP = FreqStartRB;
	    pvPut(FreqStartSP, SYNC);
	    efClear(FreqStartFlag);

	    FreqStopSP = FreqStopRB;
   	    pvPut(FreqStopSP, SYNC);
	    efClear(FreqStopFlag);

	    pvPut(FreqArrayProc, SYNC);
	    pvPut(SweTimeProc, SYNC);

	    efClear(SpanFlag);

	} state opr

	when (efTest(FreqStartFlag)) {
   
	    pvPut(SpanProc, SYNC);
	    efClear(SpanFlag);

	    pvPut(CenterFreqProc, SYNC);
 	    efClear(CenterFreqFlag);

	    pvPut(FreqStopProc, SYNC);
	    efClear(FreqStopFlag);
	
	    SpanSP = SpanRB;
	    pvPut(SpanSP, SYNC);
	    efClear(SpanFlag);

	    CenterFreqSP = CenterFreqRB;
	    pvPut(CenterFreqSP, SYNC);
	    efClear(CenterFreqFlag);

	    FreqStopSP = FreqStopRB;
	    pvPut(FreqStopSP, SYNC);
	    efClear(FreqStopFlag);

	    pvPut(FreqArrayProc, SYNC);
	    pvPut(SweTimeProc, SYNC);

	    efClear(FreqStartFlag);

	} state opr

	when (efTest(FreqStopFlag)) {

	    pvPut(SpanProc, SYNC);
	    efClear(SpanFlag);

	    pvPut(FreqStartProc, SYNC);
	    efClear(FreqStartFlag);

	    pvPut(CenterFreqProc, SYNC);
     	    efClear(CenterFreqFlag);

	    SpanSP = SpanRB;
	    pvPut(SpanSP, SYNC);

	    FreqStartSP = FreqStartRB;
	    pvPut(FreqStartSP, SYNC);

 	    CenterFreqSP = CenterFreqRB;
	    pvPut(CenterFreqSP, SYNC);

	    pvPut(FreqArrayProc, SYNC);
	    pvPut(SweTimeProc, SYNC);

	    efClear(FreqStopFlag);

	} state opr

	when (efTestAndClear(MarkAOffFlag)) {

	    EnblM1 = 0;
	    pvPut(EnblM1, SYNC);

	    EnblM2 = 0;
	    pvPut(EnblM2, SYNC);

	    EnblM3 = 0;
	    pvPut(EnblM3, SYNC);

	    EnblM4 = 0;
	    pvPut(EnblM4, SYNC);

	} state opr
    } 
}
