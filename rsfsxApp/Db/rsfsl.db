#---------------------------------------------------------------------
# Title      : Rohde & Schwarz FSL Spectrum Analyzer Epics Database File
# Project    :
#---------------------------------------------------------------------
# File       : rsfsl.db
# Author     : Leticia Garcez Capovilla
# Company    : Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
# Created    : 2018-03-19
# Last update: 2019-02-04
#---------------------------------------------------------------------
# Description:
#
# Defines database to use the device in EPICS
#
#---------------------------------------------------------------------
# Copyright (c) 2018 Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------
# Revisions  :
# Date        	Version  	Author         		Description
# 2018-mar-19 	1.0      	leticiagcapovilla       Created
# 2019-feb-04	2.0		leticiagcapovilla	Updated
#---------------------------------------------------------------------


# Enable/Disable Spectrogram Measurement (SPECM, Option K14)

record(bi, "$(P)$(R)EnblSpec-Sts") {
  field(DESC, "Get spectrogram measurement state")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblSpec $(PORT)")
}

record(bo, "$(P)$(R)EnblSpec-Sel") {
  field(DESC, "Enable/Disable spectrogram measurement")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblSpec($1) $(PORT)")
  field(FLNK,"$(P)$(R)EnblSpec-Sts")
}

# Enable/Disable Delete of Previous Measurement (SPECM, Opt. K14)

record(bi, "$(P)$(R)EnblDelPrevMeas-Sts") {
  field(DESC, "Get previous measurement deletion state")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblDelMeas $(PORT)")
}

record(bo, "$(P)$(R)EnblDelPrevMeas-Sel") {
  field(DESC, "Set previous measurement deletion state")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblDelMeas($1) $(PORT)")
  field(FLNK,"$(P)$(R)EnblDelPrevMeas-Sts")
}

# Number of Recorded Frames in Single Sweep Mode (SPECM, Opt. K14)

record(ai, "$(P)$(R)SpecFrameCount-RB") {
  field(DESC, "Get number of recorded frames")
  field(DTYP, "stream")
  field(INP, "@rsfsl.proto inSpecFrameCount $(PORT)")
}

record(ao, "$(P)$(R)SpecFrameCount-SP") {
  field(DESC, "Set number of frames to be recorded")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@rsfsl.proto outSpecFrameCount($1) $(PORT)")
  field(FLNK,"$(P)$(R)SpecFrameCount-RB")
}

# Frame Selection (SPECM, Opt. K14)

record(ai, "$(P)$(R)SpecFrame-RB") {
  field(DESC, "Get frame number to be acquired")
  field(DTYP, "stream")
  field(INP, "@rsfsl.proto inSpecFrame $(PORT)")
}

record(ao, "$(P)$(R)SpecFrame-SP") {
  field(DESC, "Set the frame number to be acquired")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@rsfsl.proto outSpecFrame($1) $(PORT)")
  field(FLNK,"$(P)$(R)SpecFrame-RB")
}

# History Depth (SPECM, Opt. K14)

record(ai, "$(P)$(R)SpecBuffSize-RB") {
  field(DESC, "Get the buffer size")
  field(DTYP, "stream")
  field(INP, "@rsfsl.proto inSpecBuffSize $(PORT)")
}

record(ao, "$(P)$(R)SpecBuffSize-SP") {
  field(DESC, "Set the buffer size")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@rsfsl.proto outSpecBuffSize($1) $(PORT)")
  field(FLNK,"$(P)$(R)SpecBuffSize-RB")
}

# Clean Spectrogram and History Buffer (SPECM, K14 option)

record(bo, "$(P)$(R)CleanSpec-Cmd") {
  field(DESC, "Clean spectrogram and buffer")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdCleanSpec($1) $(PORT)")
}

# Select Filter Type

record(mbbi, "$(P)$(R)FiltType-Sts") {
  field(DESC, "Get Filter Type")
  field(DTYP, "stream")
  field(ZRST, "NORM")
  field(ZRVL, "0")
  field(ONST, "FFT")
  field(ONVL, "1")
  field(TWST, "CFIL")
  field(TWVL, "2")
  field(THST, "RRC")
  field(THVL, "3")
  field(FRST, "PULS")
  field(FRVL, "4")
  field(INP, "@rsfsl.proto inFiltType $(PORT)")
}

record(mbbo, "$(P)$(R)FiltType-Sel") {
  field(DESC, "Set Filter Type")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZRST, "NORM")
  field(ZRVL, "0")
  field(ONST, "FFT")
  field(ONVL, "1")
  field(TWST, "CFIL")
  field(TWVL, "2")
  field(THST, "RRC")
  field(THVL, "3")
  field(FRST, "PULS")
  field(FRVL, "4")
  field(OUT, "@rsfsl.proto outFiltType($1) $(PORT)")
  field(FLNK, "$(P)$(R)FiltType-Sts")
}

# FFT Filters Active
# FFT filters are active only while RBW < 100kHz, so even if the Filter Type PV
# says FFT selected, it may not be active. The FFT-Sts shows the state
# of the FFT filters.

record(calc, "$(P)$(R)FFTCalc") {
  field(DESC, "Verify if FFT filter is active")
  field(INPA, "$(P)$(R)FiltType-Sts")
  field(INPB, "$(P)$(R)Rbw-Sts.RVAL")
  field(CALC, "((A=1)&&(B<100000))?1:0")
  field(FLNK, "$(P)$(R)FFT-Sts")
}

record(bi, "$(P)$(R)FFT-Sts") {
  field(DESC, "FFT State")
  field(INP, "$(P)$(R)FFTCalc")
}

# Video Bandwidth

record(mbbi, "$(P)$(R)Vbw-Sts") {
  field(DESC, "Get Video Bandwidth")
  field(DTYP, "stream")
  field(ZRST, "1 Hz")
  field(ZRVL, "1")
  field(ONST, "3 Hz")
  field(ONVL, "3")
  field(TWST, "10 Hz")
  field(TWVL, "10")
  field(THST, "30 Hz")
  field(THVL, "30")
  field(FRST, "100 Hz")
  field(FRVL, "100")
  field(FVST, "300 Hz")
  field(FVVL, "300")
  field(SXST, "1 kHz")
  field(SXVL, "1000")
  field(SVST, "3 kHz")
  field(SVVL, "3000")
  field(EIST, "10 kHz")
  field(EIVL, "10000")
  field(NIST, "30 kHz")
  field(NIVL, "30000")
  field(TEST, "100 kHz")
  field(TEVL, "100000")
  field(ELST, "300 kHz")
  field(ELVL, "300000")
  field(TVST, "1 MHz")
  field(TVVL, "1000000")
  field(TTST, "3 MHz")
  field(TTVL, "3000000")
  field(FTST, "10 MHz")
  field(FTVL, "10000000")
  field(INP, "@rsfsx.proto inVbw $(PORT)")
  field(FLNK, "$(P)$(R)SweTime-Mon")
}

record(mbbo, "$(P)$(R)Vbw-Sel") {
  field(DESC, "Set Video Bandwidth")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(SDIS, "$(P)$(R)DisableVbw")
  field(DISV, "1")
  field(ZRST, "1 Hz")
  field(ZRVL, "1")
  field(ONST, "3 Hz")
  field(ONVL, "3")
  field(TWST, "10 Hz")
  field(TWVL, "10")
  field(THST, "30 Hz")
  field(THVL, "30")
  field(FRST, "100 Hz")
  field(FRVL, "100")
  field(FVST, "300 Hz")
  field(FVVL, "300")
  field(SXST, "1 kHz")
  field(SXVL, "1000")
  field(SVST, "3 kHz")
  field(SVVL, "3000")
  field(EIST, "10 kHz")
  field(EIVL, "10000")
  field(NIST, "30 kHz")
  field(NIVL, "30000")
  field(TEST, "100 kHz")
  field(TEVL, "100000")
  field(ELST, "300 kHz")
  field(ELVL, "300000")
  field(TVST, "1 MHz")
  field(TVVL, "1000000")
  field(TTST, "3 MHz")
  field(TTVL, "3000000")
  field(FTST, "10 MHz")
  field(FTVL, "10000000")
  field(OUT, "@rsfsx.proto outVbw($1) $(PORT)")
  field(FLNK, "$(P)$(R)Vbw-Sts")
}

# Disable Video Bandwidth Filter
# Vbw-Sel must be disabled when the Auto Vbw is selected
# or if the FFT mode is active

record(calc, "$(P)$(R)DisableVbw") {
  field(DESC, "Define when to disable Vbw-Sel")
  field(INPA, "$(P)$(R)EnblVbwAuto-Sts.RVAL")
  field(INPB, "$(P)$(R)FFTCalc")
  field(CALC, "((A=1)||(B=1))?1:0")
}

# Resolution Bandwidth

record(mbbi, "$(P)$(R)Rbw-Sts") {
  field(DESC, "Get Resolution Bandwidth")
  field(DTYP, "stream")
  field(ZRST, "10 Hz")
  field(ZRVL, "10")
  field(ONST, "30 Hz")
  field(ONVL, "30")
  field(TWST, "100 Hz")
  field(TWVL, "100")
  field(THST, "300 Hz")
  field(THVL, "300")
  field(FRST, "1 kHz")
  field(FRVL, "1000")
  field(FVST, "3 kHz")
  field(FVVL, "3000")
  field(SXST, "10 kHz")
  field(SXVL, "10000")
  field(SVST, "30 kHz")
  field(SVVL, "30000")
  field(EIST, "100 kHz")
  field(EIVL, "100000")
  field(NIST, "300 kHz")
  field(NIVL, "300000")
  field(TEST, "1 MHz")
  field(TEVL, "1000000")
  field(ELST, "3 MHz")
  field(ELVL, "3000000")
  field(TVST, "10 MHz")
  field(TVVL, "10000000")
  field(INP, "@rsfsl.proto inRbw $(PORT)")
}

record(mbbo, "$(P)$(R)Rbw-Sel") {
  field(DESC, "Set Resolution Bandwidth")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(SDIS, "$(P)$(R)EnblRbwAuto-Sts")
  field(DISV, "1")
  field(ZRST, "10 Hz")
  field(ZRVL, "10")
  field(ONST, "30 Hz")
  field(ONVL, "30")
  field(TWST, "100 Hz")
  field(TWVL, "100")
  field(THST, "300 Hz")
  field(THVL, "300")
  field(FRST, "1 kHz")
  field(FRVL, "1000")
  field(FVST, "3 kHz")
  field(FVVL, "3000")
  field(SXST, "10 kHz")
  field(SXVL, "10000")
  field(SVST, "30 kHz")
  field(SVVL, "30000")
  field(EIST, "100 kHz")
  field(EIVL, "100000")
  field(NIST, "300 kHz")
  field(NIVL, "300000")
  field(TEST, "1 MHz")
  field(TEVL, "1000000")
  field(ELST, "3 MHz")
  field(ELVL, "3000000")
  field(TVST, "10 MHz")
  field(TVVL, "10000000")
  field(OUT, "@rsfsl.proto outRbw($1) $(PORT)")
  field(FLNK, "$(P)$(R)Rbw-Sts")
}
