#---------------------------------------------------------------------
# Title      : Rohde & Schwarz FSL Spectrum Analyzer Epics Database File
# Project    :
#---------------------------------------------------------------------
# File       : rsfsl.db
# Author     : Leticia Garcez Capovilla
# Company    : Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
# Created    : 2018-03-19
# Last update: 2018-04-04
#---------------------------------------------------------------------
# Description:
#
# Defines database to use the device in EPICS
#
#---------------------------------------------------------------------
# Copyright (c) 2018 Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------
# Revisions  :
# Date        	Version  	Author         		Description
# 2018-mar-19 	1.0      	leticiagcapovilla       Created
# 2018-apr-04	1.0		leticiagcapovilla	Updated
#---------------------------------------------------------------------


# Enable/Disable Spectrogram Measurement (SPECM, Option K14)

record(bi, "$(P)$(R)EnblSpec-Sts") {
  field(DESC, "Get spectrogram measurement state")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsx.proto inEnblSpec $(PORT)")
}

record(bo, "$(P)$(R)EnblSpec-Sel") {
  field(DESC, "Enable/Disable spectrogram measurement")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsx.proto outEnblSpec($1) $(PORT)")
  field(FLNK,"$(P)$(R)EnblSpec-Sts")
}

# Enable/Disable Delete of Previous Measurement (SPECM, Opt. K14)

record(bi, "$(P)$(R)EnblDelPrevMeas-Sts") {
  field(DESC, "Get previous measurement deletion state")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsx.proto inEnblDelMeas $(PORT)")
}

record(bo, "$(P)$(R)EnblDelPrevMeas-Sel") {
  field(DESC, "Set previous measurement deletion state")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsx.proto outEnblDelMeas($1) $(PORT)")
  field(FLNK,"$(P)$(R)EnblDelPrevMeas-Sts")
}

# Number of Recorded Frames in Single Sweep Mode (SPECM, Opt. K14)

record(ai, "$(P)$(R)SpecFrameCount-RB") {
  field(DESC, "Get number of recorded frames")
  field(DTYP, "stream")
  field(INP, "@rsfsx.proto inSpecFrameCount $(PORT)")
}

record(ao, "$(P)$(R)SpecFrameCount-SP") {
  field(DESC, "Set number of frames to be recorded")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@rsfsx.proto outSpecFrameCount(1) $(PORT)")
  field(FLNK,"$(P)$(R)SpecFrameCount-RB")
}

# Frame Selection (SPECM, Opt. K14)

record(ai, "$(P)$(R)SpecFrame-RB") {
  field(DESC, "Get frame number to be acquired")
  field(DTYP, "stream")
  field(INP, "@rsfsx.proto inSpecFrame $(PORT)")
}

record(ao, "$(P)$(R)SpecFrame-SP") {
  field(DESC, "Set the frame number to be acquired")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@rsfsx.proto outSpecFrame(1) $(PORT)")
  field(FLNK,"$(P)$(R)SpecFrame-RB")
}

# History Depth (SPECM, Opt. K14)

record(ai, "$(P)$(R)SpecBuffSize-RB") {
  field(DESC, "Get the buffer size")
  field(DTYP, "stream")
  field(INP, "@rsfsx.proto inSpecBuffSize $(PORT)")
}

record(ao, "$(P)$(R)SpecBuffSize-SP") {
  field(DESC, "Set the buffer size")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(OUT, "@rsfsx.proto outSpecBuffSize(1) $(PORT)")
  field(FLNK,"$(P)$(R)SpecBuffSize-RB")
}

# Get Spectrogram from FSL
# The frames are stored in the FSL memory and retrieved all together

record(bo, "$(P)$(R)GetFSLSpec-Sel") {
  field(DESC, "Get Spectrogram from FSL")
  field(PINI, "YES")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(FLNK, "$(P)$(R)FSLSpecArray-Mon")
}

# Spectrogram Array Acquisition (SPECM, Option K14)
# Directly obtained from the FSL

record(waveform, "$(P)$(R)FSLSpecArray-Mon") {
  field(DESC, "Get the whole stored spectrogram")
  field(SDIS, "$(P)$(R)GetFSLSpec-Sel")
  field(DISV, "0")
  field(NELM, "501")
  field(FTVL, "FLOAT")
  field(DTYP, "stream")
  field(INP, "@rsfsx.proto monSpec $(PORT)")
}

# Clean Spectrogram and History Buffer (SPECM, K14 option)

record(bo, "$(P)$(R)CleanSpec-Cmd") {
  field(DESC, "Clean spectrogram and buffer")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsx.proto cmdCleanSpec($1) $(PORT)")
}
