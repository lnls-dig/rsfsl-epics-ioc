#---------------------------------------------------------------------
# Title      : Rohde & Schwarz FSL Spectrum Analyzer Epics Protocol File
# Project    :
#---------------------------------------------------------------------
# File       : rsfsl.proto
# Author     : Leticia Garcez Capovilla
# Company    : Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
# Created    : 2018-03-19
# Last update: 2018-04-04
#---------------------------------------------------------------------
# Description:
#
# Defines protocol to use the device as a StreamDevice IOC in EPICS
#
#---------------------------------------------------------------------
# Copyright (c) 2018 Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------
# Revisions  :
# Date        	Version  	Author         		Description
# 2018-mar-19 	1.0      	leticiagcapovilla       Created
# 2018-apr-04	1.0		leticiagcapovilla	Updated
#---------------------------------------------------------------------

#####################################################################
# Reference Level

record(ai, "$(P)$(R)RefLvl-RB") {
  field(DESC, "Get reference level")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "dBm")
  field(INP, "@rsfsl.proto inRefLvl $(PORT)")
}

record(ao, "$(P)$(R)RefLvl-SP") {
  field(DESC, "Set reference level")
  field(DTYP, "stream")
  field(EGU, "dBm")
  field(OUT, "@rsfsl.proto outRefLvl($1) $(PORT)")
  field(FLNK,"$(P)$(R)RefLvl-RB")
}

# Reference Level Offset

record(ai, "$(P)$(R)RefOff-RB") {
  field(DESC, "Get reference level offset")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "dBm")
  field(INP, "@rsfsl.proto inRefOff $(PORT)")
}

record(ao, "$(P)$(R)RefOff-SP") {
  field(DESC, "Set reference level offset")
  field(DTYP, "stream")
  field(EGU, "dBm")
  field(OUT, "@rsfsl.proto outRefOff($1) $(PORT)")
  field(FLNK,"$(P)$(R)RefLvlFout")
}

# Reference Level Fanout

record(fanout, "$(P)$(R)RefLvlFout") {
  field(DESC, "Reference Level Fanout")
  field(LNK1, "$(P)$(R)RefOff-RB")
  field(LNK2, "$(P)$(R)RefLvl-RB")
  field(SELM, "All")
}

# Enable Continuous Sweep Mode

record(bi, "$(P)$(R)EnblContSwe-Sts") {
  field(DESC, "Get Continuous Sweep State")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(ZNAM, "SINGLE")
  field(ONAM, "CONTINUOUS")
  field(INP, "@rsfsl.proto inEnblContSwe $(PORT)")
}

record(bo, "$(P)$(R)EnblContSwe-Sel") {
  field(DESC, "Enable/Disable Continuous Sweep")
  field(DTYP, "stream")
  field(ZNAM, "SINGLE")
  field(ONAM, "CONTINUOUS")
  field(OUT, "@rsfsl.proto outEnblContSwe($1) $(PORT)")
  field(FLNK,"$(P)$(R)EnblContSwe-Sts")
}

# Sweep Points Number

record(ai, "$(P)$(R)SwePts-RB") {
  field(DESC, "Get number of points in one sweep")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "points")
  field(INP, "@rsfsl.proto inSwePts $(PORT)")
}

record(ao, "$(P)$(R)SwePts-SP") {
  field(DESC, "Set number of points in one sweep")
  field(DTYP, "stream")
  field(EGU, "points")
  field(OUT, "@rsfsl.proto outSwePts($1) $(PORT)")
  field(FLNK, "$(P)$(R)SweFout")
}

# Sweep Time

record(ai, "$(P)$(R)SweTime-RB") {
  field(DESC, "Get Sweep Time")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "3")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "s")
  field(INP, "@rsfsl.proto inSweTime $(PORT)")
}

record(ao, "$(P)$(R)SweTime-SP") {
  field(DESC, "Set Sweep Time")
  field(DTYP, "stream")
  field(PREC, "3")
  field(EGU, "s")
  field(OUT, "@rsfsl.proto outSweTime($1) $(PORT)")
  field(FLNK, "$(P)$(R)SweFout")
}

# Enable/Disable automatic coupling of the sweep time to the 
# frequency span and bandwidth settings 

record(bi, "$(P)$(R)EnblSweTimeAuto-Sts") {
  field(DESC, "Get Sweep Time Auto Coupling State")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblSweTimeAuto $(PORT)")
}

record(bo, "$(P)$(R)EnblSweTimeAuto-Sel") {
  field(DESC, "Enable/Disable Sweep Time Auto Coupling")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblSweTimeAuto($1) $(PORT)")
  field(FLNK,"$(P)$(R)EnblSweTimeAuto-Sts")
}

# Sweep Fanout

record(fanout, "$(P)$(R)SweFout") {
  field(DESC, "Sweep Fanout")
  field(LNK1, "$(P)$(R)SwePts-RB")
  field(LNK2, "$(P)$(R)SweTime-RB")
  field(SELM, "All")
}

# Center Frequency

record(ai, "$(P)$(R)FreqCenter-RB") {
  field(DESC, "Get center frequency")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "3")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inFrqCent $(PORT)")
}

record(ao, "$(P)$(R)FreqCenter-SP") {
  field(DESC, "Set center frequency")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outFrqCent($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqFout")
}

# Frequency Span

record(ai, "$(P)$(R)FreqSpan-RB") {
  field(DESC, "Get frequency span")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inFrqSpan $(PORT)")
}

record(ao, "$(P)$(R)FreqSpan-SP") {
  field(DESC, "Set frequency span")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outFrqSpan($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqFout")
}

# Frequency Fanout

record(fanout, "$(P)$(R)FreqFout") {
  field(DESC, "Frequency Fanout")
  field(LNK1, "$(P)$(R)FreqSpan-RB")
  field(LNK2, "$(P)$(R)FreqStart-RB")
  field(LNK3, "$(P)$(R)FreqStop-RB")
  field(LNK4, "$(P)$(R)FreqCenter-RB")
  field(SELM, "All")
}

# Start Frequency

record(ai, "$(P)$(R)FreqStart-RB") {
  field(DESC, "Get start frequency")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inFrqStart $(PORT)")
}

record(ao, "$(P)$(R)FreqStart-SP") {
  field(DESC, "Set start frequency")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outFrqStart($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqFout")
}

# Stop Frequency

record(ai, "$(P)$(R)FreqStop-RB") {
  field(DESC, "Get stop frequency")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inFrqStop $(PORT)")
}

record(ao, "$(P)$(R)FreqStop-SP") {
  field(DESC, "Set stop frequency")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outFrqStop($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqFout")
}

#Enable/Disable Markers (1-4)

record(bi, "$(P)$(R)EnblMark1-Sts") {
  field(DESC, "Get Marker1 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblMark1 $(PORT)")
}

record(bo, "$(P)$(R)EnblMark1-Sel") {
  field(DESC, "Enable or Disable Marker1 State")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblMark1($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

record(bi, "$(P)$(R)EnblMark2-Sts") {
  field(DESC, "Get Marker2 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblMark2 $(PORT)")
}

record(bo, "$(P)$(R)EnblMark2-Sel") {
  field(DESC, "Enable or Disable Marker2 State")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblMark2($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

record(bi, "$(P)$(R)EnblMark3-Sts") {
  field(DESC, "Get Marker3 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblMark3 $(PORT)")
}

record(bo, "$(P)$(R)EnblMark3-Sel") {
  field(DESC, "Enable or Disable Marker3 State")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblMark3($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

record(bi, "$(P)$(R)EnblMark4-Sts") {
  field(DESC, "Get Marker4 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblMark4 $(PORT)")
}

record(bo, "$(P)$(R)EnblMark4-Sel") {
  field(DESC, "Enable or Disable Marker4 State")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblMark4($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

# Markers X Values

record(ai, "$(P)$(R)MarkX1-RB") {
  field(DESC, "Get X value of the marker1")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inMarkX1 $(PORT)")
}

record(ao, "$(P)$(R)MarkX1-SP") {
  field(DESC, "Set X value of the marker1")
  field(DTYP, "stream")
  field(PREC, "4")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outMarkX1($1) $(PORT)")
  field(FLNK,"$(P)$(R)Mkr1Fout")
}

record(ai, "$(P)$(R)MarkX2-RB") {
  field(DESC, "Get X value of the marker2")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inMarkX2 $(PORT)")
}

record(ao, "$(P)$(R)MarkX2-SP") {
  field(DESC, "Set X value of the marker2")
  field(DTYP, "stream")
  field(PREC, "4")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outMarkX2($1) $(PORT)")
  field(FLNK,"$(P)$(R)Mkr2Fout")
}

record(ai, "$(P)$(R)MarkX3-RB") {
  field(DESC, "Get X value of the marker3")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inMarkX3 $(PORT)")
}

record(ao, "$(P)$(R)MarkX3-SP") {
  field(DESC, "Set X value of the marker3")
  field(DTYP, "stream")
  field(PREC, "4")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outMarkX3($1) $(PORT)")
  field(FLNK,"$(P)$(R)Mkr3Fout")
}

record(ai, "$(P)$(R)MarkX4-RB") {
  field(DESC, "Get X value of the marker4")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "Hz")
  field(INP, "@rsfsl.proto inMarkX4 $(PORT)")
}

record(ao, "$(P)$(R)MarkX4-SP") {
  field(DESC, "Set X value of the marker4")
  field(DTYP, "stream")
  field(PREC, "4")
  field(EGU, "Hz")
  field(OUT, "@rsfsl.proto outMarkX4($1) $(PORT)")
  field(FLNK,"$(P)$(R)Mkr4Fout")
}

###### Processing to turn off the X and Y measured
###### Values
#
#record(calcout, "$(P)$(R)TestMkr1") {
#  field(DESC, "Test Marker 1 Status")
#  field(SCAN, "1 second")
#  field(INPA, "$(P)$(R)EnblMark1-Sts.RVAL")
#  field(CALC, "A=0?")
#  field(OUT, "$(P)$(R)MarkX1-SP.VAL")
#}
#
## Enable/Disable Marker Frequency Counters (1-4)
#
#record(bi, "$(P)$(R)EnblMarkCount1-Sts") {
#  field(DESC, "Get Marker1 Freq. Counter State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMarkCount1 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMarkCount1-Sel") {
#  field(DESC, "Enable or Disable Marker1 Freq. Counter")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMarkCount1($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMarkCount1-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMarkCount2-Sts") {
#  field(DESC, "Get Marker2 Freq. Counter State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMarkCount2 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMarkCount2-Sel") {
#  field(DESC, "Enable or Disable Marker2 Freq. Counter")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMarkCount2($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMarkCount2-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMarkCount3-Sts") {
#  field(DESC, "Get Marker3 Freq. Counter State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMarkCount3 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMarkCount3-Sel") {
#  field(DESC, "Enable or Disable Marker3 Freq. Counter")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMarkCount3($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMarkCount3-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMarkCount4-Sts") {
#  field(DESC, "Get Marker4 Freq. Counter State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMarkCount4 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMarkCount4-Sel") {
#  field(DESC, "Enable or Disable Marker4 Freq. Counter")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMarkCount4($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMarkCount4-Sts")
#}
#
## Marker frequency counter resolution
#
#record(mbbi, "$(P)$(R)MarkCountRes-Sts") {
#  field(DESC, "Get Resolution of the Frequency Counter")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZRVL, "0")
#  field(ZRST, "0.1")
#  field(ONVL, "1")
#  field(ONST, "1")
#  field(TWVL, "2")
#  field(TWST, "10")
#  field(THVL, "3")
#  field(THST, "100")
#  field(FRVL, "4")
#  field(FRST, "1000")
#  field(FVVL, "5")
#  field(FVST, "10000")
#  field(INP, "@rsfsl.proto inMarkCountRes $(PORT)")
#}
#
#record(mbbo, "$(P)$(R)MarkCountRes-Sel") {
#  field(DESC, "Get Resolution of the Frequency Counter")
#  field(DTYP, "stream")
#  field(ZRVL, "0")
#  field(ZRST, "0.1")
#  field(ONVL, "1")
#  field(ONST, "1")
#  field(TWVL, "2")
#  field(TWST, "10")
#  field(THVL, "3")
#  field(THST, "100")
#  field(FRVL, "4")
#  field(FRST, "1000")
#  field(FVVL, "5")
#  field(FVST, "10000")
#  field(OUT, "@rsfsl.proto outMarkCountRes($1) $(PORT)")
#  field(FLNK, "$(P)$(R)MarkCountRes-Sts")
#}
#
## Enable/Disable local oscillator supression for peak search
#
#record(bi, "$(P)$(R)EnblLocalOscSupr-Sts") {
#  field(DESC, "Get Oscillator Supression State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblLocalOscSupr $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblLocalOscSupr-Sel") {
#  field(DESC, "Enable/Disable Oscillator Supression")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblLocalOscSupr($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblLocalOscSupr-Sts")
#}
#
## Enable/Disable automatic maximum peak searh for markers (1-4)
#
#record(bi, "$(P)$(R)EnblMaxAuto1-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMaxAuto1 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMaxAuto1-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMaxAuto1($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMaxAuto1-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMaxAuto2-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMaxAuto2 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMaxAuto2-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMaxAuto2($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMaxAuto2-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMaxAuto3-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMaxAuto3 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMaxAuto3-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMaxAuto3($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMaxAuto3-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMaxAuto4-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMaxAuto4 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMaxAuto4-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMaxAuto4($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMaxAuto4-Sts")
#}
#
## Enable automatic minimum peak searh for markers (1-4)
#
#record(bi, "$(P)$(R)EnblMinAuto1-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMinAuto1 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMinAuto1-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMinAuto1($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMinAuto1-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMinAuto2-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMinAuto2 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMinAuto2-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMinAuto2($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMinAuto2-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMinAuto3-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMinAuto3 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMinAuto3-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMinAuto3($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMinAuto3-Sts")
#}
#
#record(bi, "$(P)$(R)EnblMinAuto4-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMinAuto4 $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMinAuto4-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMinAuto4($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMinAuto4-Sts")
#}
#
## Define the peak excursion
#
#record(ai, "$(P)$(R)MarkPExcursion-RB") {
#  field(DESC, "Get Peak Excursion")
#  field(PINI, "YES")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(MDEL, "-1")
#  field(ADEL, "-1")
#  field(EGU, "dB")
#  field(INP, "@rsfsl.proto inMarkPExcursion $(PORT)")
#}
#
#record(ao, "$(P)$(R)MarkPExcursion-SP") {
#  field(DESC, "Set Peak Excursion")
#  field(DTYP, "stream")
#  field(EGU, "dB")
#  field(OUT, "@rsfsl.proto outMarkPExcursion($1) $(PORT)")
#  field(FLNK,"$(P)$(R)RefLvl-RB")
#}
#
## Enable/Disable marker limited search range
#
#record(bi, "$(P)$(R)EnblMarkLimit-Sts") {
#  field(DESC, "Get Automatic Peak Search State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblMarkLimit $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblMarkLimit-Sel") {
#  field(DESC, "Enable or Disable Automatic Peak Search")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblMarkLimit($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblMarkLimit-Sts")
#}
#
## Left limit for the search range
#
#record(ai, "$(P)$(R)MarkLimitLeft-RB") {
#  field(DESC, "Get left limit for the search range")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(INP, "@rsfsl.proto inMarkLimitLeft $(PORT)")
#}
#
#record(ao, "$(P)$(R)MarkLimitLeft-SP") {
#  field(DESC, "Set Left limit for the search range")
#  field(DTYP, "stream")
#  field(OUT, "@rsfsl.proto outMarkLimitLeft($1) $(PORT)")
#  field(FLNK,"$(P)$(R)MarkLimitLeft-RB")
#}
#
## Right limit for the search range
#
#record(ai, "$(P)$(R)MarkLimitRight-RB") {
#  field(DESC, "Get Right Limit for the Search Range")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(INP, "@rsfsl.proto inMarkLimitRight $(PORT)")
#}
#
#record(ao, "$(P)$(R)MarkLimitRight-SP") {
#  field(DESC, "Set Right Limit for the Search Range")
#  field(DTYP, "stream")
#  field(OUT, "@rsfsl.proto outMarkLimitRight($1) $(PORT)")
#  field(FLNK,"$(P)$(R)MarkLimitRight-RB")
#}
#
# Enable/Disable Markers (1-4)

record(bi, "$(P)$(R)EnblDMark1-Sts") {
  field(DESC, "Get Delta Marker1 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblDMark1 $(PORT)")
}

record(bo, "$(P)$(R)EnblDMark1-Sel") {
  field(DESC, "Enable or Disable Delta Marker1")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblDMark1($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

record(bi, "$(P)$(R)EnblDMark2-Sts") {
  field(DESC, "Get Delta Marker2 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblDMark2 $(PORT)")
}

record(bo, "$(P)$(R)EnblDMark2-Sel") {
  field(DESC, "Enable or Disable Delta Marker2")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblDMark2($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

record(bi, "$(P)$(R)EnblDMark3-Sts") {
  field(DESC, "Get Delta Marker3 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblDMark3 $(PORT)")
}

record(bo, "$(P)$(R)EnblDMark3-Sel") {
  field(DESC, "Enable or Disable Delta Marker3")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblDMark3($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

record(bi, "$(P)$(R)EnblDMark4-Sts") {
  field(DESC, "Get Delta Marker4 State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblDMark4 $(PORT)")
}

record(bo, "$(P)$(R)EnblDMark4-Sel") {
  field(DESC, "Enable or Disable Delta Marker4")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblDMark4($1) $(PORT)")
  field(FLNK,"$(P)$(R)MkrFout")
}

# State of the tracking generator output

record(bi, "$(P)$(R)EnblOutp-Sts") {
  field(DESC, "Get Tracking Generator State")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(INP, "@rsfsl.proto inEnblOut $(PORT)")
}

record(bo, "$(P)$(R)EnblOutp-Sel") {
  field(DESC, "Enable or Disable Tracking Generator")
  field(DTYP, "stream")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(OUT, "@rsfsl.proto outEnblOut($1) $(PORT)")
  field(FLNK,"$(P)$(R)EnblOutp-Sts")
}

## Enable/Disable Tracking Generator Normalization of the measurement
## results
#
#record(bi, "$(P)$(R)EnblOutCorrect-Sts") {
#  field(DESC, "Get Tracking Generator State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblOutCorrect $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblOutCorrect-Sel") {
#  field(DESC, "Enable or Disable Tracking Generator")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblOutCorrect($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblOutCorrect-Sts")
#}
#
# Input Attenuator Value 

record(mbbi, "$(P)$(R)AttIn-Sts") {
  field(DTYP, "stream")
  field(PINI, "YES")
  field(ZRST, "0 dB")
  field(ZRVL, "0")
  field(ONST, "5 dB")
  field(ONVL, "5")
  field(TWST, "10 dB")
  field(TWVL, "10")
  field(THST, "15 dB")
  field(THVL, "15")
  field(FRST, "20 dB")
  field(FRVL, "20")
  field(FVST, "25 dB")
  field(FVVL, "25")
  field(SXST, "30 dB")
  field(SXVL, "30")
  field(SVST, "35 dB")
  field(SVVL, "35")
  field(EIST, "40 dB")
  field(EIVL, "40")
  field(NIST, "45 dB")
  field(NIVL, "45")
  field(TEST, "50 dB")
  field(TEVL, "50")
  field(INP, "@rsfsl.proto inAttIn $(PORT)")
}

record(mbbo, "$(P)$(R)AttIn-Sel") {
  field(DTYP, "stream")
  field(ZRST, "0 dB")
  field(ZRVL, "0")
  field(ONST, "5 dB")
  field(ONVL, "5")
  field(TWST, "10 dB")
  field(TWVL, "10")
  field(THST, "15 dB")
  field(THVL, "15")
  field(FRST, "20 dB")
  field(FRVL, "20")
  field(FVST, "25 dB")
  field(FVVL, "25")
  field(SXST, "30 dB")
  field(SXVL, "30")
  field(SVST, "35 dB")
  field(SVVL, "35")
  field(EIST, "40 dB")
  field(EIVL, "40")
  field(NIST, "45 dB")
  field(NIVL, "45")
  field(TEST, "50 dB")
  field(TEVL, "50")
  field(OUT, "@rsfsl.proto outAttIn(1) $(PORT)")
  field(FLNK, "$(P)$(R)AttIn-Sts")
}

## Enable/Disable automatic coupling of the input attenuation to the
## reference level
#
#record(bi, "$(P)$(R)EnblAttAuto-Sts") {
#  field(DESC, "Get Automatic Input Coupling State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblAttAuto $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblAttAuto-Sel") {
#  field(DESC, "Enable/Disable Autom. Input Coupling")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblAttAuto($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblAttAuto-Sts")
#}
#
## Enable/Disable Input Preamplifier
#
#record(bi, "$(P)$(R)EnblPreamp-Sts") {
#  field(DESC, "Get Input Preamplifier State")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(INP, "@rsfsl.proto inEnblPreamp $(PORT)")
#}
#
#record(bo, "$(P)$(R)EnblPreamp-Sel") {
#  field(DESC, "Enable or Disable Input Preamplifier")
#  field(DTYP, "stream")
#  field(ZNAM, "OFF")
#  field(ONAM, "ON")
#  field(OUT, "@rsfsl.proto outEnblPreamp($1) $(PORT)")
#  field(FLNK,"$(P)$(R)EnblPreamp-Sts")
#}
#
## Instrments Nominal Input Impedance
#
#record(bi, "$(P)$(R)ImpdIn-Sts") {
#  field(DESC, "Get Input Impedance")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "50")
#  field(ONAM, "75")
#  field(INP, "@rsfsl.proto inImpdIn $(PORT)")
#}
#
#record(bo, "$(P)$(R)ImpdIn-Sel") {
#  field(DESC, "Set Input Impedance")
#  field(DTYP, "stream")
#  field(ZNAM, "50")
#  field(ONAM, "75")
#  field(OUT, "@rsfsl.proto outImpdIn($1) $(PORT)")
#  field(FLNK,"$(P)$(R)ImpdIn-Sts")
#}
#
## Oscilators Reference
#
#record(bi, "$(P)$(R)RoscSrc-Sts") {
#  field(DESC, "Get Oscillators Reference")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(ZNAM, "50")
#  field(ONAM, "75")
#  field(INP, "@rsfsl.proto inRoscSrc $(PORT)")
#}
#
#record(bo, "$(P)$(R)RoscSrc-Sel") {
#  field(DESC, "Set Oscillators Reference")
#  field(DTYP, "stream")
#  field(ZNAM, "50")
#  field(ONAM, "75")
#  field(OUT, "@rsfsl.proto outRoscSrc($1) $(PORT)")
#  field(FLNK,"$(P)$(R)RoscSrc-Sts")
#}
#
# Tracking Generator level 

record(ai, "$(P)$(R)LvlOut-RB") {
  field(DESC, "Get Tracking Generators Level")
  field(PINI, "YES")
  field(DTYP, "stream")
  field(PREC, "3")
  field(EGU, "dBm")
  field(INP, "@rsfsl.proto inLvlOut $(PORT)")
}

record(ao, "$(P)$(R)LvlOut-SP") {
  field(DESC, "Set Tracking Generators Level")
  field(DTYP, "stream")
  field(PREC, "3")
  field(EGU, "dBm")
  field(OUT, "@rsfsl.proto outLvlOut(1) $(PORT)")
  field(FLNK,"$(P)$(R)LvlOut-RB")
}

## Tracking Generator Offset Level 
#
#record(ai, "$(P)$(R)LvlOutOffset-RB") {
#  field(DESC, "Get Tracking Generator Offset Level")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(EGU, "dB")
#  field(INP, "@rsfsl.proto inLvlOutOffset $(PORT)")
#}
#
#record(ao, "$(P)$(R)LvlOutOffset-SP") {
#  field(DESC, "Set Tracking Generator Offset Level")
#  field(DTYP, "stream")
#  field(EGU, "dB")
#  field(OUT, "@rsfsl.proto outLvlOutOffset(1) $(PORT)")
#  field(FLNK,"$(P)$(R)LvlOutOffset-RB")
#}
#
# Resolution Bandwidth 

record(mbbi, "$(P)$(R)Rbw-Sts") {
  field(DTYP, "stream")
  field(SCAN, "1 second")
  field(ZRST, "3 kHz")
  field(ZRVL, "3000")
  field(ONST, "10 kHz")
  field(ONVL, "10000")
  field(TWST, "30 kHz")
  field(TWVL, "30000")
  field(THST, "100 kHz")
  field(THVL, "100000")
  field(FRST, "300 kHz")
  field(FRVL, "300000")
  field(FVST, "1 MHz")
  field(FVVL, "1000000")
  field(SXST, "3 MHz")
  field(SXVL, "3000000")
  field(SVST, "10 MHz")
  field(SVVL, "10000000")
  field(INP, "@rsfsl.proto inRbw $(PORT)")
}

record(mbbo, "$(P)$(R)Rbw-Sel") {
  field(DTYP, "stream")
  field(ZRST, "3 kHz")
  field(ZRVL, "3000")
  field(ONST, "10 kHz")
  field(ONVL, "10000")
  field(TWST, "30 kHz")
  field(TWVL, "30000")
  field(THST, "100 kHz")
  field(THVL, "100000")
  field(FRST, "300 kHz")
  field(FRVL, "300000")
  field(FVST, "1 MHz")
  field(FVVL, "1000000")
  field(SXST, "3 MHz")
  field(SXVL, "3000000")
  field(SVST, "10 MHz")
  field(SVVL, "10000000")
  field(OUT, "@rsfsl.proto outRbw(1) $(PORT)")
  field(FLNK, "$(P)$(R)Rbw-Sts")
}

######################################################################
########################## MONITOR ###################################
######################################################################

# Get identification

record(stringin, "$(P)$(R)Idn-Cte") {
  field(DESC, "Get device identification")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(INP, "@rsfsl.proto inIdn $(PORT)")
}

# Queries Markers Y Values

record(ai, "$(P)$(R)MarkY1-Mon") {
  field(DESC, "Get Y value of the marker")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "dBm")
  field(INP, "@rsfsl.proto monMarkY1 $(PORT)")
}

record(ai, "$(P)$(R)MarkY2-Mon") {
  field(DESC, "Get Y value of the marker2")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "dBm")
  field(INP, "@rsfsl.proto monMarkY2 $(PORT)")
}

record(ai, "$(P)$(R)MarkY3-Mon") {
  field(DESC, "Get Y value of the marker3")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "dBm")
  field(INP, "@rsfsl.proto monMarkY3 $(PORT)")
}

record(ai, "$(P)$(R)MarkY4-Mon") {
  field(DESC, "Get Y value of the marker4")
  field(DTYP, "stream")
  field(PREC, "4")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(EGU, "dBm")
  field(INP, "@rsfsl.proto monMarkY4 $(PORT)")
}

## Queries the result of the markers frequency counters (1-4)
#
#record(ai, "$(P)$(R)MarkFreqCount1-Mon") {
#  field(DESC, "Get Marker1 Freq. Counter Result")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(MDEL, "-1")
#  field(ADEL, "-1")
#  field(EGU, "dBm")
#  field(INP, "@rsfsl.proto monMarkFreqCount1 $(PORT)")
#}
#
#record(ai, "$(P)$(R)MarkFreqCount2-Mon") {
#  field(DESC, "Get Marker2 Freq. Counter Result")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(MDEL, "-1")
#  field(ADEL, "-1")
#  field(EGU, "dBm")
#  field(INP, "@rsfsl.proto monMarkFreqCount2 $(PORT)")
#}
#
#record(ai, "$(P)$(R)MarkFreqCount3-Mon") {
#  field(DESC, "Get Marker3 Freq. Counter Result")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(MDEL, "-1")
#  field(ADEL, "-1")
#  field(EGU, "dBm")
#  field(INP, "@rsfsl.proto monMarkFreqCount3 $(PORT)")
#}
#
#record(ai, "$(P)$(R)MarkFreqCount4-Mon") {
#  field(DESC, "Get Marker4 Freq. Counter Result")
#  field(SCAN, "1 second")
#  field(DTYP, "stream")
#  field(PREC, "1")
#  field(MDEL, "-1")
#  field(ADEL, "-1")
#  field(EGU, "dBm")
#  field(INP, "@rsfsl.proto monMarkFreqCount4 $(PORT)")
#}
#
######################################################################
############################ COMMAND #################################
######################################################################

# Reset to default state

record(bo, "$(P)$(R)Rst-Cmd") {
  field(DESC, "Reset to default state")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdRst $(PORT)")
  field(FLNK, "$(P)$(R)StsRstFout1")
}

# Status Reset Fanout
#
#record(fanout, "$(P)$(R)StsRstFout1") {
#  field(LNK1, "$(P)$(R)RefLvl-RB")
#  field(LNK2, "$(P)$(R)RefOff-RB")
#  field(LNK3, "$(P)$(R)EnblContSwe-Sts")
#  field(LNK4, "$(P)$(R)Rbw-RB")
#  field(LNK5, "$(P)$(R)SwePts-RB")
#  field(LNK6, "$(P)$(R)StsRstFout2")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout2") {
#  field(LNK1, "$(P)$(R)SweTime-RB")
#  field(LNK2, "$(P)$(R)FreqCenter-RB")
#  field(LNK3, "$(P)$(R)FreqSpan-RB")
#  field(LNK4, "$(P)$(R)FreqStart-RB")
#  field(LNK5, "$(P)$(R)FreqStop-RB")
#  field(LNK6, "$(P)$(R)StsRstFout3")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout3") {
#  field(LNK1, "$(P)$(R)EnblMark1-Sts")
#  field(LNK2, "$(P)$(R)EnblMark2-Sts")
#  field(LNK3, "$(P)$(R)EnblMark3-Sts")
#  field(LNK4, "$(P)$(R)EnblMark4-Sts")
#  field(LNK5, "$(P)$(R)MarkPExcursion-RB")
#  field(LNK6, "$(P)$(R)StsRstFout4")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout4") {
#  field(LNK1, "$(P)$(R)EnblDMark1-Sts")
#  field(LNK2, "$(P)$(R)EnblDMark2-Sts")
#  field(LNK3, "$(P)$(R)EnblDMark3-Sts")
#  field(LNK4, "$(P)$(R)EnblDMark4-Sts")
#  field(LNK5, "$(P)$(R)EnblOutp-Sts")
#  field(LNK6, "$(P)$(R)StsRstFout5")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout5") {
#  field(LNK1, "$(P)$(R)AttIn-RB")
#  field(LNK2, "$(P)$(R)EnblAttAuto-Sts")
#  field(LNK3, "$(P)$(R)EnblPreamp-Sts")
#  field(LNK4, "$(P)$(R)ImpdIn-Sts")
#  field(LNK5, "$(P)$(R)RoscSrc-Sts")
#  field(LNK6, "$(P)$(R)StsRstFout6")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout6") {
#  field(LNK1, "$(P)$(R)LvlOut-RB")
#  field(LNK2, "$(P)$(R)LvlOutOffset-RB")
#  field(LNK3, "$(P)$(R)EnblMarkLimit-Sts")
#  field(LNK4, "$(P)$(R)MarkLimitLeft-RB")
#  field(LNK5, "$(P)$(R)MarkLimitRight-RB")
#  field(LNK6, "$(P)$(R)StsRstFout7")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout7") {
#  field(LNK1, "$(P)$(R)EnblMinAuto1-Sts")
#  field(LNK2, "$(P)$(R)EnblMinAuto2-Sts")
#  field(LNK3, "$(P)$(R)EnblMinAuto3-Sts")
#  field(LNK4, "$(P)$(R)EnblMinAuto4-Sts")
#  field(LNK5, "$(P)$(R)EnblMaxAuto1-Sts")
#  field(LNK6, "$(P)$(R)StsRstFout8")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout8") {
#  field(LNK1, "$(P)$(R)EnblMaxAuto2-Sts")
#  field(LNK2, "$(P)$(R)EnblMaxAuto3-Sts")
#  field(LNK3, "$(P)$(R)EnblMaxAuto4-Sts")
#  field(LNK4, "$(P)$(R)EnblLocalOscSupr-Sts")
#  field(LNK5, "$(P)$(R)MarkCountRes-Sts")
#  field(LNK6, "$(P)$(R)StsRstFout9")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout8") {
#  field(LNK1, "$(P)$(R)EnblMaxAuto2-Sts")
#  field(LNK2, "$(P)$(R)EnblMaxAuto3-Sts")
#  field(LNK3, "$(P)$(R)EnblMaxAuto4-Sts")
#  field(LNK4, "$(P)$(R)EnblLocalOscSupr-Sts")
#  field(LNK5, "$(P)$(R)MarkCountRes-Sts")
#  field(LNK6, "$(P)$(R)StsRstFout9")
#  field(SELM, "All")
#}
#
#record(fanout, "$(P)$(R)StsRstFout9") {
#  field(LNK1, "$(P)$(R)EnblMarkCount1-Sts")
#  field(LNK2, "$(P)$(R)EnblMarkCount2-Sts")
#  field(LNK3, "$(P)$(R)EnblMarkCount3-Sts")
#  field(LNK4, "$(P)$(R)EnblMarkCount4-Sts")
#  field(LNK5, "$(P)$(R)EnblSweTimeAuto-Sts")
#  field(LNK6, "$(P)$(R)EnblOutCorrect-Sts")
#  field(SELM, "All")
#}
#
# Set Marker to Max Peak on Trace (1-4)

record(bo, "$(P)$(R)MarkMax1-Cmd") {
  field(DESC, "Set marker1 to max peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMax1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMax2-Cmd") {
  field(DESC, "Set marker2 to max peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMax2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMax3-Cmd") {
  field(DESC, "Set marker3 to max peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMax3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMax4-Cmd") {
  field(DESC, "Set marker4 to max peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMax4($1) $(PORT)")
}

# Turn all markers off

record(bo, "$(P)$(R)MarkAOff-Cmd") {
  field(DESC, "Turn all markers off")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkAOff($1) $(PORT)")
  field(FLNK, "$(P)$(R)MkrFout")
}

# Markers Fanout

record(fanout, "$(P)$(R)MkrFout") {
  field(LNK1, "$(P)$(R)EnblMark1-Sts")
  field(LNK2, "$(P)$(R)EnblMark2-Sts")
  field(LNK3, "$(P)$(R)EnblMark3-Sts")
  field(LNK4, "$(P)$(R)EnblMark4-Sts")
  field(LNK5, "$(P)$(R)EnblDMark1-Sts")
  field(LNK6, "$(P)$(R)ExtraMkrFout")
  field(SELM, "All")
}

# Extra Marker Fanout

record(fanout, "$(P)$(R)ExtraMkrFout") {
  field(LNK1, "$(P)$(R)EnblDMark2-Sts")
  field(LNK2, "$(P)$(R)EnblDMark3-Sts")
  field(LNK3, "$(P)$(R)EnblDMark4-Sts")
  field(SELM, "All")
}

######### Records for processing Markers Data ##########

record(calcout, "$(P)$(R)TestMarkers") {
  field(SCAN, "1 second")
  field(INPA, "$(P)$(R)EnblMark1-Sts.RVAL")
  field(INPB, "$(P)$(R)EnblMark2-Sts.RVAL")
  field(INPC, "$(P)$(R)EnblMark3-Sts.RVAL")
  field(INPD, "$(P)$(R)EnblMark4-Sts.RVAL")
  field(CALC, "(1*A)+(2*B)+(4*C)+(8*D)")
  field(OUT, "$(P)$(R)MkrSelect")
  field(FLNK, "$(P)$(R)MkrSelect")
}

record(fanout,"$(P)$(R)MkrSelect") {
  field(LNK1, "$(P)$(R)Mkr1Fout")
  field(LNK2, "$(P)$(R)Mkr2Fout")
  field(LNK3, "$(P)$(R)Mkr3Fout")
  field(LNK4, "$(P)$(R)Mkr4Fout")
  field(SELM, "Mask")
  field(SELL, "$(P)$(R)TestMarkers")
}

record(fanout,"$(P)$(R)Mkr1Fout") {
  field(LNK1, "$(P)$(R)MarkX1-RB")
  field(LNK2, "$(P)$(R)MarkY1-Mon")
  field(LNK3, "$(P)$(R)EnblMark1-Sts")
  field(SELM, "All")
}

record(fanout,"$(P)$(R)Mkr2Fout") {
  field(LNK1, "$(P)$(R)MarkX2-RB")
  field(LNK2, "$(P)$(R)MarkY2-Mon")
  field(LNK3, "$(P)$(R)EnblMark2-Sts")
  field(SELM, "All")
}

record(fanout,"$(P)$(R)Mkr3Fout") {
  field(LNK1, "$(P)$(R)MarkX3-RB")
  field(LNK2, "$(P)$(R)MarkY3-Mon")
  field(LNK3,  "$(P)$(R)EnblMark3-Sts")
  field(SELM, "All")
}

record(fanout,"$(P)$(R)Mkr4Fout") {
  field(LNK1, "$(P)$(R)MarkX4-RB")
  field(LNK2, "$(P)$(R)MarkY4-Mon")
  field(LNK3, "$(P)$(R)EnblMark4-Sts")
  field(SELM, "All")
}

# Position the marker to the next smaller maximium value to the left
# of the current value (1-4)

record(bo, "$(P)$(R)MarkMaxLeft1-Cmd") {
  field(DESC, "Position marker1 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxLeft1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxLeft2-Cmd") {
  field(DESC, "Position marker2 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxLeft2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxLeft3-Cmd") {
  field(DESC, "Position marker3 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxLeft3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxLeft4-Cmd") {
  field(DESC, "Position marker4 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxLeft4($1) $(PORT)")
}

# Position the marker to the next smaller minimium value to the left
# of the current value (1-4)

record(bo, "$(P)$(R)MarkMinLeft1-Cmd") {
  field(DESC, "Position marker1 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinLeft1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinLeft2-Cmd") {
  field(DESC, "Position marker2 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinLeft2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinLeft3-Cmd") {
  field(DESC, "Position marker3 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinLeft3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinLeft4-Cmd") {
  field(DESC, "Position marker4 to the left ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinLeft4($1) $(PORT)")
}

# Position the marker to the next smaller maximium value of the
# corresponding trace (1-4)

record(bo, "$(P)$(R)MarkMaxNext1-Cmd") {
  field(DESC, "Position mkr1 to next value on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxNext1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxNext2-Cmd") {
  field(DESC, "Position mkr2 to next value on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxNext2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxNext3-Cmd") {
  field(DESC, "Position mkr3 to next value on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxNext3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxNext4-Cmd") {
  field(DESC, "Position mkr4 to next value on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxNext4($1) $(PORT)")
}

# Position the marker to the next smaller minimium value of the
# corresponding trace (1-4)

record(bo, "$(P)$(R)MarkMinNext1-Cmd") {
  field(DESC, "Position mkr1 to the next value of trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinNext1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinNext2-Cmd") {
  field(DESC, "Position mkr2 to the next value of trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinNext2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinNext3-Cmd") {
  field(DESC, "Position mkr3 to the next value of trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinNext3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinNext4-Cmd") {
  field(DESC, "Position mkr4 to the next value of trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinNext4($1) $(PORT)")
}

# Position the marker to the next smaller maximium value to the right
# of the current value (1-4)

record(bo, "$(P)$(R)MarkMaxRight1-Cmd") {
  field(DESC, "Position marker1 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxRight1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxRight2-Cmd") {
  field(DESC, "Position marker2 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxRight2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxRight3-Cmd") {
  field(DESC, "Position marker3 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxRight3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMaxRight4-Cmd") {
  field(DESC, "Position marker4 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMaxRight4($1) $(PORT)")
}

# Position the marker to the next smaller minimium value to the right
# of the current value (1-4)

record(bo, "$(P)$(R)MarkMinRight1-Cmd") {
  field(DESC, "Position marker1 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinRight1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinRight2-Cmd") {
  field(DESC, "Position marker2 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinRight2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinRight3-Cmd") {
  field(DESC, "Position marker3 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinRight3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMinRight4-Cmd") {
  field(DESC, "Position marker4 to the right ")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMinRight4($1) $(PORT)")
}

# Set Marker to Min Peak on Trace (1-4)

record(bo, "$(P)$(R)MarkMin1-Cmd") {
  field(DESC, "Set marker1 to min peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMin1($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMin2-Cmd") {
  field(DESC, "Set marker2 to min peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMin2($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMin3-Cmd") {
  field(DESC, "Set marker3 to min peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMin3($1) $(PORT)")
}

record(bo, "$(P)$(R)MarkMin4-Cmd") {
  field(DESC, "Set marker4 to min peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdMarkMin4($1) $(PORT)")
}

# Switch off all delta markers

record(bo, "$(P)$(R)DMarkAOff-Cmd") {
  field(DESC, "Switch off all delta markers")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsl.proto cmdDMarkAOff($1) $(PORT)")
  field(FLNK, "$(P)$(R)MkrFout")
}

######################################################################
############################## SAVE ##################################
######################################################################

# Save
# Desc: Save '-Sel' and '-SP' PV values.

record(bo, "$(P)$(R)Save-Cmd"){
  field(DESC, "Save PV values cmd")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(HIGH, "1")
  field(FLNK, "$(P)$(R)SaveTrg")
}

# This PV is monitored by autosave
record(calc, "$(P)$(R)SaveTrg"){
  field(ASG, "Reserved")
  field(DESC, "Save PV values trigger")
  field(INPA, "$(P)$(R)Save-Cmd.VAL")
  field(CALC, "A=1?!VAL:VAL")
  field(VAL, "0")
}

